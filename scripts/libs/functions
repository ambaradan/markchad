#!/bin/env bash

function divider() {
  printf -- "-%.0s" $(seq 1 80)
  printf "\n"
}
function indent() {
  local indentSize=2
  local indent=1
  if [ -n "$1" ]; then indent=$1; fi
  pr -to $((indent * indentSize))
}
# Loop until a key is pressed
function press_to_exit() {
  while true; do
    read -rsn1 key # Read a single character silently
    if [[ -n "$key" ]]; then
      printf "\n"
      exit
    fi
  done
}
# Title
title_msg() {
  termwidth=80
  padding="$(printf '%0.1s' ={1..500})"
  printf "%*.*s ${bold_in}${orange}%s${clear}${bold_out} %*.*s\n" 0 "$(((termwidth - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((termwidth - 1 - ${#1}) / 2))" "$padding"
}
section_title() {
local text="$1"
    local width=80  # Total width limit is set to 80 columns

    # Calculate the total spaces to fill
    local total_spaces=$((width - ${#text}))

    # If text is longer than 80 columns, truncate the text
    if (( total_spaces < 0 )); then
        text="${text:0:width}"
        total_spaces=0
    fi

    # Create the dotted line
    local dots=$(printf "%${total_spaces}s" "." | tr " " ".")

    # Print the right-aligned text with dots on the left
    printf "%s%s\n" "$dots" "$text"
}
warning_title() {
  termwidth=80
  padding="$(printf '%0.1s' ={1..500})"
  printf "%*.*s ${bold_in}${red}%s${clear}${bold_out} %*.*s\n" 0 "$(((termwidth - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((termwidth - 1 - ${#1}) / 2))" "$padding"
}
